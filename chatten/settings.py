"""
Django settings for chatten project.

Generated by 'django-admin startproject' using Django 3.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-nl3=c2dp6q6p@w5^1s5$92dyfh-a_vnb6^fh5cs-_ah*9hpntx'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'djoser',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'chat',
    'notifications',
    'channels'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
 
]

SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 3600  # Session expires in 1 hour
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Session expires when the browser is closed
# If True, Django will set the cookie as Secure (only sent over HTTPS)
# SESSION_COOKIE_SECURE = True

# # If True, Django will set the cookie to be HttpOnly, meaning it is not accessible via JavaScript
# SESSION_COOKIE_HTTPONLY = True

# The path where the session cookie is valid (default is '/')
# SESSION_COOKIE_PATH = '/'

# # Domain where the session cookie is valid (default is current domain)
# SESSION_COOKIE_DOMAIN = None

# # Whether the session cookie is sent only over secure connections
# CSRF_COOKIE_SECURE = True  

ROOT_URLCONF = 'chatten.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# settings.py
CELERY_BROKER_URL = 'pyamqp://guest:guest@localhost//'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'


ASGI_APPLICATION = 'chatten.asgi.application'

WSGI_APPLICATION = 'chatten.wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
       
    ),
}
# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
     "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "chatten",
        "USER": "steph",
        "PASSWORD": "9703",
        "HOST": "localhost",
        "PORT": "3306",
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

CORS_ORIGIN_ALLOW_ALL = True
# settings.py

CORS_ALLOW_CREDENTIALS = True  # Allow credentials (cookies, authorization headers)

# Allow requests from your front-end origin (in this case, http://localhost:8080)
CORS_ALLOWED_ORIGINS = [
    'http://localhost:8081',  # The URL of your frontend
]

# Alternatively, you can allow any origin but ensure credentials are handled securely
# CORS_ALLOWED_ORIGIN_REGEXES = [
#     r"^https?://localhost:8080$",
# ]

# This header must not be wildcard '*' when credentials are included
CORS_ALLOW_HEADERS = [
    'content-type',
    'authorization',
    'x-requested-with',
]

# Optional: Allow certain methods, such as POST, GET, PUT, DELETE
CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'OPTIONS',
    'PUT',
    'DELETE',
    'PATCH'
]


TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
